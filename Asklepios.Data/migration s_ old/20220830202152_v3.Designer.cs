// <auto-generated />
using System;
using Asklepios.Data.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Asklepios.Data.Migrations
{
    [DbContext(typeof(AsklepiosDbContext))]
    [Migration("20220830202152_v3")]
    partial class v3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Asklepios.Core.Models.IssuedMedicine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PaymentDiscount")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("IssuedMedicine");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Aglomeration")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAndNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Aglomeration = 0,
                            City = "Warszawa",
                            Description = "Ośrodek w centrum Warszawy ze świetnym dojazdem z każdej dzielnicy.",
                            ImagePath = "/img/Locations/loc1.jpeg",
                            Name = "Ośrodek Warszawa Jerozolimskie",
                            PhoneNumber = "22 780 421 433",
                            PostalCode = "01-111",
                            StreetAndNumber = "Jerozolimskie 80"
                        },
                        new
                        {
                            Id = 2L,
                            Aglomeration = 0,
                            City = "Warszawa",
                            Description = "Ośrodek w Warszawie w dzielnicy Ochota, z bardzo dobrym dojazdem z zachodniej części Warszawy.",
                            ImagePath = "/img/Locations/loc2.jpg",
                            Name = "Ośrodek Warszawa Ochota",
                            PhoneNumber = "22 787 477 323",
                            PostalCode = "01-211",
                            StreetAndNumber = "Grójecka 100"
                        },
                        new
                        {
                            Id = 3L,
                            Aglomeration = 0,
                            City = "Warszawa",
                            Description = "Ośrodek na południu Warszawy ze świetnym dojazdem z południa Warszawy oraz regionów wzdłuż M1 oraz południowych okolic Warszawy.",
                            ImagePath = "/img/Locations/loc3.jpg",
                            Name = "Ośrodek Warszawa Ursynów",
                            PhoneNumber = "22 777 600 313",
                            PostalCode = "03-055",
                            StreetAndNumber = "KEN 20"
                        },
                        new
                        {
                            Id = 4L,
                            Aglomeration = 0,
                            City = "Warszawa",
                            Description = "Ośrodek na wschodzie Warszawy z dobrym dojazdem ze wschodnich dzielnic Warszawy a także wschodnich okolic Warszawy.",
                            ImagePath = "/img/Locations/loc4.jpg",
                            Name = "Ośrodek Warszawa Targówek",
                            PhoneNumber = "22 777 444 333",
                            PostalCode = "02-222",
                            StreetAndNumber = "Malborska"
                        },
                        new
                        {
                            Id = 5L,
                            Aglomeration = 3,
                            City = "Kraków",
                            Description = "Ośrodek w Krakowie, w świetnie skomunikowanym Kazimierzu",
                            ImagePath = "/img/Locations/loc5.jpg",
                            Name = "Ośrodek Kraków Pogórze",
                            PhoneNumber = "20 300 400 111",
                            PostalCode = "80-078",
                            StreetAndNumber = "Podgórska 14"
                        },
                        new
                        {
                            Id = 6L,
                            Aglomeration = 2,
                            City = "Gdańsk",
                            Description = "Ośrodek w centrum Gdańska na popularnej Wyspie Spichrzów",
                            ImagePath = "/img/Locations/loc6.jpg",
                            Name = "Ośrodek Gdańsk Wyspa Spichrzów",
                            PhoneNumber = "30 500 500 241",
                            PostalCode = "45-100",
                            StreetAndNumber = "Chlebnicka 11"
                        },
                        new
                        {
                            Id = 7L,
                            Aglomeration = 1,
                            City = "Poznań",
                            Description = "Ośrodek położony na terenie Galerie Malta Poznań",
                            ImagePath = "/img/locations/loc7.jpg",
                            Name = "Ośrodek Poznań Malta",
                            PhoneNumber = "30 500 500 241",
                            PostalCode = "60-102",
                            StreetAndNumber = "Maltańska 1"
                        },
                        new
                        {
                            Id = 8L,
                            Aglomeration = 4,
                            City = "Wrocław",
                            Description = "Placówka położona nieco na wschód od ścisłego centrum. Łatwo do niej trafić, idąc prosto od strony placu Grunwaldzkiego.",
                            ImagePath = "/img/locations/loc8.jpg",
                            Name = "Ośrodek Wrocław Szczytnicka",
                            PhoneNumber = "71 500 500 241",
                            PostalCode = "50-031",
                            StreetAndNumber = "Szczytnicka 11"
                        },
                        new
                        {
                            Id = 9L,
                            Aglomeration = 8,
                            City = "Katowice",
                            Description = "Ośrodek położony w bliskiej okolicy dworca PKP oraz Placu Wolności",
                            ImagePath = "/img/locations/loc9.jpg",
                            Name = "Ośrodek Kopalnia Katowice",
                            PhoneNumber = "32 500 500 241",
                            PostalCode = "40-750",
                            StreetAndNumber = "Młyńska 23"
                        });
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalPackages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Podstawowy pakiet dla osób szukajacych podstawowej opieki zdrowotnej. W cenie pakietu są zawarte bezpłatne konsultacje z 7 specjalizacji oraz podstawowe badania",
                            Name = "Podstawowy"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Srebrny pakiet jest pakietem dla osób szukajacych rozszerzonej opieki zdrowotnej. W ramach abonamentu medycznego są darmowe konsultacje u większości specjalistów, rozszerzony pakiet badań medycznych oraz 3 wizyty rehabilitacyjnE rocznie.",
                            Name = "Srebrny"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Złoty pakiet dla osób szukajacych specjalistycznej opieki, w tym opieki dentystycznej oraz rehabilitacji.",
                            Name = "Złoty"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Platynowy pakiet jest pakietem dla osób szukajacych pełnej ochrony zdrowia. Wszystkie oferowane przez nas usługi są oferowane nieodpłatnie. Priorytetowa obsługa w przypadku badań/operacji niecierpiących zwłoki. ",
                            Name = "Platynowy"
                        });
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalReferral", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpireDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasBeenUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("IssueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("IssuedById")
                        .HasColumnType("bigint");

                    b.Property<long>("IssuedToId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinorMedicalServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrimaryMedicalServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VisitId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisitWhenIssuedId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisitWhenUsedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("IssuedToId");

                    b.HasIndex("MinorMedicalServiceId");

                    b.HasIndex("PrimaryMedicalServiceId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitWhenIssuedId");

                    b.HasIndex("VisitWhenUsedId");

                    b.ToTable("MedicalReferrals");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<short?>("FloorNumber")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("MedicalRoomType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("MedicalRooms");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 1,
                            Name = "1"
                        },
                        new
                        {
                            Id = 2L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 8,
                            Name = "2"
                        },
                        new
                        {
                            Id = 3L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 0,
                            Name = "3"
                        },
                        new
                        {
                            Id = 4L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 0,
                            Name = "4"
                        },
                        new
                        {
                            Id = 5L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 2,
                            Name = "5"
                        },
                        new
                        {
                            Id = 6L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 3,
                            Name = "6"
                        },
                        new
                        {
                            Id = 7L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 11,
                            Name = "7"
                        },
                        new
                        {
                            Id = 8L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 7,
                            Name = "8"
                        },
                        new
                        {
                            Id = 9L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 6,
                            Name = "9"
                        },
                        new
                        {
                            Id = 10L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 9,
                            Name = "10"
                        },
                        new
                        {
                            Id = 11L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 9,
                            Name = "11"
                        },
                        new
                        {
                            Id = 12L,
                            FloorNumber = (short)0,
                            LocationId = 1L,
                            MedicalRoomType = 10,
                            Name = "12"
                        },
                        new
                        {
                            Id = 13L,
                            FloorNumber = (short)1,
                            LocationId = 2L,
                            MedicalRoomType = 4,
                            Name = "1A"
                        },
                        new
                        {
                            Id = 14L,
                            FloorNumber = (short)1,
                            LocationId = 2L,
                            MedicalRoomType = 5,
                            Name = "1B"
                        },
                        new
                        {
                            Id = 15L,
                            FloorNumber = (short)1,
                            LocationId = 2L,
                            MedicalRoomType = 0,
                            Name = "1C"
                        },
                        new
                        {
                            Id = 16L,
                            FloorNumber = (short)1,
                            LocationId = 2L,
                            MedicalRoomType = 0,
                            Name = "1D"
                        },
                        new
                        {
                            Id = 17L,
                            FloorNumber = (short)1,
                            LocationId = 2L,
                            MedicalRoomType = 3,
                            Name = "1E"
                        },
                        new
                        {
                            Id = 18L,
                            FloorNumber = (short)2,
                            LocationId = 2L,
                            MedicalRoomType = 1,
                            Name = "2A"
                        },
                        new
                        {
                            Id = 19L,
                            FloorNumber = (short)2,
                            LocationId = 2L,
                            MedicalRoomType = 11,
                            Name = "2B"
                        },
                        new
                        {
                            Id = 20L,
                            FloorNumber = (short)2,
                            LocationId = 2L,
                            MedicalRoomType = 6,
                            Name = "2C"
                        },
                        new
                        {
                            Id = 21L,
                            FloorNumber = (short)2,
                            LocationId = 2L,
                            MedicalRoomType = 0,
                            Name = "2D"
                        },
                        new
                        {
                            Id = 22L,
                            FloorNumber = (short)3,
                            LocationId = 2L,
                            MedicalRoomType = 0,
                            Name = "3A"
                        },
                        new
                        {
                            Id = 23L,
                            FloorNumber = (short)3,
                            LocationId = 2L,
                            MedicalRoomType = 5,
                            Name = "3B"
                        },
                        new
                        {
                            Id = 24L,
                            FloorNumber = (short)3,
                            LocationId = 2L,
                            MedicalRoomType = 1,
                            Name = "3C"
                        },
                        new
                        {
                            Id = 25L,
                            FloorNumber = (short)3,
                            LocationId = 2L,
                            MedicalRoomType = 0,
                            Name = "3D"
                        },
                        new
                        {
                            Id = 26L,
                            FloorNumber = (short)4,
                            LocationId = 3L,
                            MedicalRoomType = 5,
                            Name = "41"
                        },
                        new
                        {
                            Id = 27L,
                            FloorNumber = (short)4,
                            LocationId = 3L,
                            MedicalRoomType = 5,
                            Name = "42"
                        },
                        new
                        {
                            Id = 28L,
                            FloorNumber = (short)4,
                            LocationId = 3L,
                            MedicalRoomType = 0,
                            Name = "43"
                        },
                        new
                        {
                            Id = 29L,
                            FloorNumber = (short)4,
                            LocationId = 3L,
                            MedicalRoomType = 11,
                            Name = "44"
                        },
                        new
                        {
                            Id = 30L,
                            FloorNumber = (short)4,
                            LocationId = 3L,
                            MedicalRoomType = 0,
                            Name = "45"
                        },
                        new
                        {
                            Id = 31L,
                            FloorNumber = (short)4,
                            LocationId = 3L,
                            MedicalRoomType = 1,
                            Name = "46"
                        },
                        new
                        {
                            Id = 32L,
                            FloorNumber = (short)4,
                            LocationId = 3L,
                            MedicalRoomType = 2,
                            Name = "47"
                        },
                        new
                        {
                            Id = 33L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 3,
                            Name = "51"
                        },
                        new
                        {
                            Id = 34L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 7,
                            Name = "52"
                        },
                        new
                        {
                            Id = 35L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 6,
                            Name = "53"
                        },
                        new
                        {
                            Id = 36L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 10,
                            Name = "54"
                        },
                        new
                        {
                            Id = 37L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 4,
                            Name = "55"
                        },
                        new
                        {
                            Id = 38L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 4,
                            Name = "56"
                        },
                        new
                        {
                            Id = 39L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 4,
                            Name = "57"
                        },
                        new
                        {
                            Id = 40L,
                            FloorNumber = (short)5,
                            LocationId = 3L,
                            MedicalRoomType = 4,
                            Name = "58"
                        },
                        new
                        {
                            Id = 41L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 4,
                            Name = "2"
                        },
                        new
                        {
                            Id = 42L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 8,
                            Name = "3"
                        },
                        new
                        {
                            Id = 43L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 9,
                            Name = "4"
                        },
                        new
                        {
                            Id = 44L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 1,
                            Name = "5"
                        },
                        new
                        {
                            Id = 45L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 0,
                            Name = "6"
                        },
                        new
                        {
                            Id = 46L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 0,
                            Name = "7"
                        },
                        new
                        {
                            Id = 47L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 10,
                            Name = "8"
                        },
                        new
                        {
                            Id = 48L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 5,
                            Name = "9"
                        },
                        new
                        {
                            Id = 49L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 1,
                            Name = "10"
                        },
                        new
                        {
                            Id = 50L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 7,
                            Name = "11"
                        },
                        new
                        {
                            Id = 51L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 11,
                            Name = "12"
                        },
                        new
                        {
                            Id = 52L,
                            FloorNumber = (short)7,
                            LocationId = 4L,
                            MedicalRoomType = 0,
                            Name = "13"
                        },
                        new
                        {
                            Id = 53L,
                            FloorNumber = (short)2,
                            LocationId = 5L,
                            MedicalRoomType = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 54L,
                            FloorNumber = (short)2,
                            LocationId = 5L,
                            MedicalRoomType = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 55L,
                            FloorNumber = (short)2,
                            LocationId = 5L,
                            MedicalRoomType = 0,
                            Name = "C"
                        },
                        new
                        {
                            Id = 56L,
                            FloorNumber = (short)2,
                            LocationId = 5L,
                            MedicalRoomType = 0,
                            Name = "D"
                        },
                        new
                        {
                            Id = 57L,
                            FloorNumber = (short)2,
                            LocationId = 5L,
                            MedicalRoomType = 2,
                            Name = "E"
                        },
                        new
                        {
                            Id = 58L,
                            FloorNumber = (short)2,
                            LocationId = 5L,
                            MedicalRoomType = 11,
                            Name = "F"
                        },
                        new
                        {
                            Id = 59L,
                            FloorNumber = (short)3,
                            LocationId = 5L,
                            MedicalRoomType = 4,
                            Name = "G"
                        },
                        new
                        {
                            Id = 60L,
                            FloorNumber = (short)3,
                            LocationId = 5L,
                            MedicalRoomType = 5,
                            Name = "H"
                        },
                        new
                        {
                            Id = 61L,
                            FloorNumber = (short)3,
                            LocationId = 5L,
                            MedicalRoomType = 5,
                            Name = "I"
                        },
                        new
                        {
                            Id = 62L,
                            FloorNumber = (short)3,
                            LocationId = 5L,
                            MedicalRoomType = 0,
                            Name = "J"
                        },
                        new
                        {
                            Id = 63L,
                            FloorNumber = (short)3,
                            LocationId = 5L,
                            MedicalRoomType = 1,
                            Name = "K"
                        },
                        new
                        {
                            Id = 64L,
                            FloorNumber = (short)3,
                            LocationId = 5L,
                            MedicalRoomType = 0,
                            Name = "L"
                        },
                        new
                        {
                            Id = 65L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 1,
                            Name = "1"
                        },
                        new
                        {
                            Id = 66L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 8,
                            Name = "2"
                        },
                        new
                        {
                            Id = 67L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 0,
                            Name = "3"
                        },
                        new
                        {
                            Id = 68L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 0,
                            Name = "4"
                        },
                        new
                        {
                            Id = 69L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 2,
                            Name = "5"
                        },
                        new
                        {
                            Id = 70L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 3,
                            Name = "6"
                        },
                        new
                        {
                            Id = 71L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 11,
                            Name = "7"
                        },
                        new
                        {
                            Id = 72L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 7,
                            Name = "8"
                        },
                        new
                        {
                            Id = 73L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 6,
                            Name = "9"
                        },
                        new
                        {
                            Id = 74L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 9,
                            Name = "10"
                        },
                        new
                        {
                            Id = 75L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 9,
                            Name = "11"
                        },
                        new
                        {
                            Id = 76L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 10,
                            Name = "12"
                        },
                        new
                        {
                            Id = 77L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 0,
                            Name = "13"
                        },
                        new
                        {
                            Id = 78L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 0,
                            Name = "14"
                        },
                        new
                        {
                            Id = 79L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 0,
                            Name = "15"
                        },
                        new
                        {
                            Id = 80L,
                            FloorNumber = (short)0,
                            LocationId = 6L,
                            MedicalRoomType = 0,
                            Name = "16"
                        },
                        new
                        {
                            Id = 81L,
                            FloorNumber = (short)1,
                            LocationId = 7L,
                            MedicalRoomType = 0,
                            Name = "11"
                        },
                        new
                        {
                            Id = 82L,
                            FloorNumber = (short)2,
                            LocationId = 7L,
                            MedicalRoomType = 0,
                            Name = "23"
                        },
                        new
                        {
                            Id = 83L,
                            FloorNumber = (short)2,
                            LocationId = 7L,
                            MedicalRoomType = 0,
                            Name = "24"
                        },
                        new
                        {
                            Id = 84L,
                            FloorNumber = (short)2,
                            LocationId = 7L,
                            MedicalRoomType = 0,
                            Name = "25"
                        },
                        new
                        {
                            Id = 85L,
                            FloorNumber = (short)5,
                            LocationId = 7L,
                            MedicalRoomType = 1,
                            Name = "51"
                        },
                        new
                        {
                            Id = 86L,
                            FloorNumber = (short)5,
                            LocationId = 7L,
                            MedicalRoomType = 8,
                            Name = "52"
                        },
                        new
                        {
                            Id = 87L,
                            FloorNumber = (short)5,
                            LocationId = 7L,
                            MedicalRoomType = 0,
                            Name = "53"
                        },
                        new
                        {
                            Id = 88L,
                            FloorNumber = (short)5,
                            LocationId = 7L,
                            MedicalRoomType = 0,
                            Name = "54"
                        },
                        new
                        {
                            Id = 89L,
                            FloorNumber = (short)5,
                            LocationId = 7L,
                            MedicalRoomType = 2,
                            Name = "55"
                        },
                        new
                        {
                            Id = 90L,
                            FloorNumber = (short)5,
                            LocationId = 7L,
                            MedicalRoomType = 3,
                            Name = "56"
                        },
                        new
                        {
                            Id = 91L,
                            FloorNumber = (short)5,
                            LocationId = 8L,
                            MedicalRoomType = 11,
                            Name = "57"
                        },
                        new
                        {
                            Id = 92L,
                            FloorNumber = (short)5,
                            LocationId = 8L,
                            MedicalRoomType = 7,
                            Name = "58"
                        },
                        new
                        {
                            Id = 93L,
                            FloorNumber = (short)5,
                            LocationId = 8L,
                            MedicalRoomType = 6,
                            Name = "59"
                        },
                        new
                        {
                            Id = 94L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 9,
                            Name = "60"
                        },
                        new
                        {
                            Id = 95L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 9,
                            Name = "61"
                        },
                        new
                        {
                            Id = 96L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 10,
                            Name = "62"
                        },
                        new
                        {
                            Id = 97L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "63"
                        },
                        new
                        {
                            Id = 98L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "64"
                        },
                        new
                        {
                            Id = 99L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "65"
                        },
                        new
                        {
                            Id = 100L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "66"
                        },
                        new
                        {
                            Id = 101L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "67"
                        },
                        new
                        {
                            Id = 102L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "68"
                        },
                        new
                        {
                            Id = 103L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "69"
                        },
                        new
                        {
                            Id = 104L,
                            FloorNumber = (short)6,
                            LocationId = 8L,
                            MedicalRoomType = 0,
                            Name = "69B"
                        },
                        new
                        {
                            Id = 105L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 106L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 8,
                            Name = "B"
                        },
                        new
                        {
                            Id = 107L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "C"
                        },
                        new
                        {
                            Id = 108L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "D"
                        },
                        new
                        {
                            Id = 109L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 2,
                            Name = "E"
                        },
                        new
                        {
                            Id = 110L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 3,
                            Name = "F"
                        },
                        new
                        {
                            Id = 111L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 11,
                            Name = "G"
                        },
                        new
                        {
                            Id = 112L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 7,
                            Name = "H"
                        },
                        new
                        {
                            Id = 113L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 6,
                            Name = "I"
                        },
                        new
                        {
                            Id = 114L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 9,
                            Name = "J"
                        },
                        new
                        {
                            Id = 115L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 9,
                            Name = "K"
                        },
                        new
                        {
                            Id = 116L,
                            FloorNumber = (short)0,
                            LocationId = 9L,
                            MedicalRoomType = 10,
                            Name = "L"
                        },
                        new
                        {
                            Id = 117L,
                            FloorNumber = (short)1,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "M"
                        },
                        new
                        {
                            Id = 118L,
                            FloorNumber = (short)1,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "N"
                        },
                        new
                        {
                            Id = 119L,
                            FloorNumber = (short)1,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "O"
                        },
                        new
                        {
                            Id = 120L,
                            FloorNumber = (short)1,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "P"
                        },
                        new
                        {
                            Id = 121L,
                            FloorNumber = (short)1,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "R"
                        },
                        new
                        {
                            Id = 122L,
                            FloorNumber = (short)2,
                            LocationId = 9L,
                            MedicalRoomType = 8,
                            Name = "S"
                        },
                        new
                        {
                            Id = 123L,
                            FloorNumber = (short)2,
                            LocationId = 9L,
                            MedicalRoomType = 9,
                            Name = "T"
                        },
                        new
                        {
                            Id = 124L,
                            FloorNumber = (short)2,
                            LocationId = 9L,
                            MedicalRoomType = 0,
                            Name = "U"
                        },
                        new
                        {
                            Id = 125L,
                            FloorNumber = (short)2,
                            LocationId = 9L,
                            MedicalRoomType = 12,
                            Name = "W"
                        });
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryService")
                        .HasColumnType("bit");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PrimaryMedicalServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrimaryServiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("RequireRefferal")
                        .HasColumnType("bit");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<long>("VisitCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VisitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PrimaryMedicalServiceId");

                    b.HasIndex("VisitCategoryId");

                    b.HasIndex("VisitId");

                    b.ToTable("MedicalServices");

                    b.HasData(
                        new
                        {
                            Id = 91L,
                            Description = "EKG spoczynkowe",
                            IsPrimaryService = false,
                            Name = "EKG spoczynkowe",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 92L,
                            Description = "EKG wysiłkowe",
                            IsPrimaryService = false,
                            Name = "EKG wysiłkowe",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 93L,
                            Description = "Echo serca",
                            IsPrimaryService = false,
                            Name = "Echo serca",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Kolonoskopia",
                            IsPrimaryService = false,
                            Name = "Kolonoskopia",
                            PrimaryServiceId = 16L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Gastroskopia",
                            IsPrimaryService = false,
                            Name = "Gastroskopia",
                            PrimaryServiceId = 16L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 11L,
                            Description = "Piaskowanie",
                            IsPrimaryService = false,
                            Name = "Piaskowanie",
                            PrimaryServiceId = 62L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 12L,
                            Description = "Fluoryzacja",
                            IsPrimaryService = false,
                            Name = "Fluoryzacja",
                            PrimaryServiceId = 62L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 24L,
                            Description = "Podstawowe badanie krwi",
                            IsPrimaryService = false,
                            Name = "Podstawowe badanie krwi",
                            RequireRefferal = false,
                            StandardPrice = 400m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 25L,
                            Description = "Rozszerzone badanie krwi",
                            IsPrimaryService = false,
                            Name = "Rozszerzone badanie krwi",
                            RequireRefferal = false,
                            StandardPrice = 400m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 26L,
                            Description = "Badanie moczu",
                            IsPrimaryService = false,
                            Name = "Badanie moczu",
                            RequireRefferal = false,
                            StandardPrice = 400m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 27L,
                            Description = "Badanie kału",
                            IsPrimaryService = false,
                            Name = "Badanie kału",
                            RequireRefferal = false,
                            StandardPrice = 400m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 28L,
                            Description = "Test genetyczny COVID-19",
                            IsPrimaryService = false,
                            Name = "Test genetyczny COVID-19",
                            RequireRefferal = false,
                            StandardPrice = 400m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 29L,
                            Description = "Test antygenowy COVID-19",
                            IsPrimaryService = false,
                            Name = "Test antygenowy COVID-19",
                            RequireRefferal = false,
                            StandardPrice = 400m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 32L,
                            Description = "Krioterapia",
                            IsPrimaryService = false,
                            Name = "Krioterapia",
                            PrimaryServiceId = 75L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 33L,
                            Description = "Elektrostymulacja",
                            IsPrimaryService = false,
                            Name = "Elektrostymulacja",
                            PrimaryServiceId = 75L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 34L,
                            Description = "Laseroterapia",
                            IsPrimaryService = false,
                            Name = "Laseroterapia",
                            PrimaryServiceId = 75L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 35L,
                            Description = "Ultradźwięki",
                            IsPrimaryService = false,
                            Name = "Ultradźwięki",
                            PrimaryServiceId = 75L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 36L,
                            Description = "Magnetoterapia",
                            IsPrimaryService = false,
                            Name = "Magnetoterapia",
                            PrimaryServiceId = 75L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 37L,
                            Description = "Płukanie ucha",
                            IsPrimaryService = false,
                            Name = "Płukanie ucha",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 50m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Audiometria",
                            IsPrimaryService = false,
                            Name = "Audiometria",
                            PrimaryServiceId = 53L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 66L,
                            Description = "Szczepienie na odrę",
                            IsPrimaryService = false,
                            Name = "Szczepienie na odrę",
                            PrimaryServiceId = 76L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 67L,
                            Description = "Szczepienie na grypę",
                            IsPrimaryService = false,
                            Name = "Szczepienie na grypę",
                            PrimaryServiceId = 76L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 68L,
                            Description = "Szczepienie na COVID-19",
                            IsPrimaryService = false,
                            Name = "Szczepienie na COVID-19",
                            PrimaryServiceId = 76L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 69L,
                            Description = "Szczepienie przeciwko wściekliźnie",
                            IsPrimaryService = false,
                            Name = "Szczepienie przeciwko wściekliźnie",
                            PrimaryServiceId = 76L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 70L,
                            Description = "Szczepienie przeciwko tężcowi",
                            IsPrimaryService = false,
                            Name = "Szczepienie przeciwko tężcowi",
                            PrimaryServiceId = 76L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 71L,
                            Description = "Szczepienie przeciwko malarii",
                            IsPrimaryService = false,
                            Name = "Szczepienie przeciwko malarii",
                            PrimaryServiceId = 76L,
                            RequireRefferal = false,
                            StandardPrice = 500m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 72L,
                            Description = "Szczepienie przeciwko cholerze",
                            IsPrimaryService = false,
                            Name = "Szczepienie przeciwko cholerze",
                            PrimaryServiceId = 76L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 80L,
                            Description = "Topografia rogówki",
                            IsPrimaryService = false,
                            Name = "Topografia rogówki",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 81L,
                            Description = "Dobór soczewek kontaktowych",
                            IsPrimaryService = false,
                            Name = "Dobór soczewek kontaktowych",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 150m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 82L,
                            Description = "Zdjęcie dna oka",
                            IsPrimaryService = false,
                            Name = "Zdjęcie dna oka",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 50m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 83L,
                            Description = "Pachymetria",
                            IsPrimaryService = false,
                            Name = "Pachymetria",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 84L,
                            Description = "Pomiar ciśnienia wewnątrzgałkowego",
                            IsPrimaryService = false,
                            Name = "Pomiar ciśnienia wewnątrzgałkowego	",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 50m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Komputerowe pole widzenia",
                            IsPrimaryService = false,
                            Name = "Komputerowe pole widzenia",
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 86L,
                            Description = "Szycie rany",
                            IsPrimaryService = false,
                            Name = "Szycie rany",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 87L,
                            Description = "Założenie szwów",
                            IsPrimaryService = false,
                            Name = "Założenie szwów",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 88L,
                            Description = "Zdjęcie szwów",
                            IsPrimaryService = false,
                            Name = "Zdjęcie szwów",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 89L,
                            Description = "Zabieg usunięcia ciała obcego",
                            IsPrimaryService = false,
                            Name = "Zabieg usunięcia ciała obcego",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 600m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 90L,
                            Description = "Biopsja otwarta",
                            IsPrimaryService = false,
                            Name = "Biopsja otwarta",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 600m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Usunięcie paznokcia",
                            IsPrimaryService = false,
                            Name = "Usunięcie paznokcia",
                            PrimaryServiceId = 48L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 77L,
                            Description = "Aparat stały kryształowy",
                            IsPrimaryService = false,
                            Name = "Aparat stały kryształowy",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 2500m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 78L,
                            Description = "Aparat stały metalowy",
                            IsPrimaryService = false,
                            Name = "Aparat stały metalowy",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 79L,
                            Description = "Aparat ruchomy - płytka Schwarza",
                            IsPrimaryService = false,
                            Name = "Aparat ruchomy - płytka Schwarza",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 13L,
                            Description = "Usunięcie ósemki",
                            IsPrimaryService = false,
                            Name = "Usunięcie ósemki",
                            PrimaryServiceId = 59L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 14L,
                            Description = "Usunięcie zęba jednokorzeniowego",
                            IsPrimaryService = false,
                            Name = "Usunięcie zęba jednokorzeniowego",
                            PrimaryServiceId = 59L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 15L,
                            Description = "Usunięcie zęba jednokorzeniowego wielokorzeniowego",
                            IsPrimaryService = false,
                            Name = "Usunięcie zęba jednokorzeniowego wielokorzeniowego",
                            PrimaryServiceId = 59L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 16L,
                            Description = "Usunięcie zęba mlecznego",
                            IsPrimaryService = false,
                            Name = "Usunięcie zęba mlecznego",
                            PrimaryServiceId = 59L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 17L,
                            Description = "Pantomogram zęba",
                            IsPrimaryService = false,
                            Name = "Pantomogram zęba",
                            PrimaryServiceId = 60L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 18L,
                            Description = "Tomografia komputerowa CBCT",
                            IsPrimaryService = false,
                            Name = "Tomografia komputerowa CBCT",
                            PrimaryServiceId = 60L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 19L,
                            Description = "Znieczulenie",
                            IsPrimaryService = false,
                            Name = "Znieczulenie",
                            PrimaryServiceId = 57L,
                            RequireRefferal = false,
                            StandardPrice = 50m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 20L,
                            Description = "Wypełnienie czasowe",
                            IsPrimaryService = false,
                            Name = "Wypełnienie czasowe",
                            PrimaryServiceId = 57L,
                            RequireRefferal = false,
                            StandardPrice = 50m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 21L,
                            Description = "Wypełnienie kompozytowe",
                            IsPrimaryService = false,
                            Name = "Wypełnienie kompozytowe",
                            PrimaryServiceId = 57L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 22L,
                            Description = "Odbudowa zęba po leczeniu kanałowym",
                            IsPrimaryService = false,
                            Name = "Odbudowa zęba po leczeniu kanałowym",
                            PrimaryServiceId = 57L,
                            RequireRefferal = false,
                            StandardPrice = 400m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 23L,
                            Description = "Dewitalizacja",
                            IsPrimaryService = false,
                            Name = "Dewitalizacja",
                            PrimaryServiceId = 57L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 63L,
                            Description = "Korona porcelanowa",
                            IsPrimaryService = false,
                            Name = "Korona porcelanowa",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 800m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 64L,
                            Description = "Licówka porcelanowa",
                            IsPrimaryService = false,
                            Name = "Licówka porcelanowa",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 1600m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 65L,
                            Description = "Korona pełnoceramiczna",
                            IsPrimaryService = false,
                            Name = "Korona pełnoceramiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 1600m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 85L,
                            Description = "Zdjęcie gipsu",
                            IsPrimaryService = false,
                            Name = "Zdjęcie gipsu",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Założenie gipsu",
                            IsPrimaryService = false,
                            Name = "Założenie gipsu",
                            PrimaryServiceId = 43L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Konsultacja gastrologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja gastrologiczna",
                            RequireRefferal = false,
                            StandardPrice = 250m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 38L,
                            Description = "Konsultacja proktologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja proktologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 39L,
                            Description = "Konsultacja internistyczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja internistyczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 40L,
                            Description = "Konsultacja pediatryczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja pediatryczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 41L,
                            Description = "Konsultacja geriatryczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja geriatryczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 42L,
                            Description = "Konsultacja ginekologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja ginekologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 43L,
                            Description = "Konsultacja ortopedyczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja ortopedyczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 44L,
                            Description = "Konsultacja kardiologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja kardiologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 45L,
                            Description = "Konsultacja okulistyczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja okulistyczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 46L,
                            Description = "Konsultacja dermatologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja dermatologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 47L,
                            Description = "Konsultacja endokrynologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja endokrynologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 48L,
                            Description = "Konsultacja chirurgii ogólnej",
                            IsPrimaryService = true,
                            Name = "Konsultacja chirurgii ogólnej",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 49L,
                            Description = "Konsultacja neurochirurgiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja neurochirurgiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 250m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 50L,
                            Description = "Konsultacja chirurgii naczyniowej",
                            IsPrimaryService = true,
                            Name = "Konsultacja chirurgii naczyniowej",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 250m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 51L,
                            Description = "Konsultacja chirurgii plastycznej",
                            IsPrimaryService = true,
                            Name = "Konsultacja chirurgii plastycznej",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 300m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 52L,
                            Description = "Konsultacja chirurgii onkologicznej",
                            IsPrimaryService = true,
                            Name = "Konsultacja chirurgii onkologicznej",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 300m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 53L,
                            Description = "Konsultacja laryngologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja laryngologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 54L,
                            Description = "Konsultacja neurologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja neurologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 55L,
                            Description = "Konsultacja urologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja urologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 56L,
                            Description = "Konsultacja psychologiczna",
                            IsPrimaryService = true,
                            Name = "Konsultacja psychologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 2L
                        },
                        new
                        {
                            Id = 57L,
                            Description = "Stomatologia zachowawcza",
                            IsPrimaryService = true,
                            Name = "Stomatologia zachowawcza",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 3L
                        },
                        new
                        {
                            Id = 58L,
                            Description = "Ortodoncja",
                            IsPrimaryService = true,
                            Name = "Ortodoncja",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 3L
                        },
                        new
                        {
                            Id = 59L,
                            Description = "Chirurgia stomatologiczna",
                            IsPrimaryService = true,
                            Name = "Chirurgia stomatologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 3L
                        },
                        new
                        {
                            Id = 60L,
                            Description = "Rentgen stomatologiczny",
                            IsPrimaryService = true,
                            Name = "Stomatologiczna diagnostyka obrazowa",
                            PrimaryServiceId = 74L,
                            RequireRefferal = true,
                            StandardPrice = 200m,
                            VisitCategoryId = 3L
                        },
                        new
                        {
                            Id = 61L,
                            Description = "Protetyka",
                            IsPrimaryService = true,
                            Name = "Protetyka",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 3L
                        },
                        new
                        {
                            Id = 62L,
                            Description = "Profilaktyka stomatologiczna",
                            IsPrimaryService = true,
                            Name = "Profilaktyka stomatologiczna",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 200m,
                            VisitCategoryId = 3L
                        },
                        new
                        {
                            Id = 76L,
                            Description = "Szczepienia",
                            IsPrimaryService = true,
                            Name = "Szczepienia",
                            PrimaryServiceId = 74L,
                            RequireRefferal = false,
                            StandardPrice = 100m,
                            VisitCategoryId = 6L
                        },
                        new
                        {
                            Id = 1L,
                            Description = "USG",
                            IsPrimaryService = true,
                            Name = "USG",
                            RequireRefferal = true,
                            StandardPrice = 200m,
                            VisitCategoryId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            Description = "RTG",
                            IsPrimaryService = true,
                            Name = "RTG",
                            RequireRefferal = true,
                            StandardPrice = 200m,
                            VisitCategoryId = 4L
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Rezonans magnetyczny",
                            IsPrimaryService = true,
                            Name = "Rezonans magnetyczny",
                            RequireRefferal = true,
                            StandardPrice = 200m,
                            VisitCategoryId = 4L
                        },
                        new
                        {
                            Id = 30L,
                            Description = "Masaż leczniczy",
                            IsPrimaryService = true,
                            Name = "Masaż leczniczy",
                            RequireRefferal = true,
                            StandardPrice = 300m,
                            VisitCategoryId = 5L
                        },
                        new
                        {
                            Id = 31L,
                            Description = "Zajęcia rehabilitacyjne",
                            IsPrimaryService = true,
                            Name = "Zajęcia rehabilitacyjne",
                            PrimaryServiceId = 74L,
                            RequireRefferal = true,
                            StandardPrice = 300m,
                            VisitCategoryId = 5L
                        },
                        new
                        {
                            Id = 75L,
                            Description = "Fizykoterapia",
                            IsPrimaryService = true,
                            Name = "Fizykoterapia",
                            PrimaryServiceId = 74L,
                            RequireRefferal = true,
                            StandardPrice = 400m,
                            VisitCategoryId = 5L
                        },
                        new
                        {
                            Id = 74L,
                            Description = "Badanie laboratoryjne",
                            IsPrimaryService = true,
                            Name = "Badanie laboratoryjne",
                            PrimaryServiceId = 74L,
                            RequireRefferal = true,
                            StandardPrice = 100m,
                            VisitCategoryId = 6L
                        },
                        new
                        {
                            Id = 94L,
                            Description = "Badanie cholesterolu",
                            IsPrimaryService = false,
                            Name = "Badanie cholesterolu",
                            PrimaryServiceId = 74L,
                            RequireRefferal = true,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 95L,
                            Description = "USG Dopplera",
                            IsPrimaryService = false,
                            Name = "USG Dopplera",
                            PrimaryServiceId = 74L,
                            RequireRefferal = true,
                            StandardPrice = 150m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 96L,
                            Description = "Anoskopia",
                            IsPrimaryService = false,
                            Name = "Anoskopia",
                            PrimaryServiceId = 38L,
                            RequireRefferal = true,
                            StandardPrice = 100m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 97L,
                            Description = "Rektoskopia",
                            IsPrimaryService = false,
                            Name = "Rektoskopia",
                            PrimaryServiceId = 38L,
                            RequireRefferal = true,
                            StandardPrice = 150m,
                            VisitCategoryId = 0L
                        },
                        new
                        {
                            Id = 98L,
                            Description = "Kolanoskopia",
                            IsPrimaryService = false,
                            Name = "Kolanoskopia",
                            PrimaryServiceId = 38L,
                            RequireRefferal = true,
                            StandardPrice = 200m,
                            VisitCategoryId = 0L
                        });
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalServiceDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(3,2)");

                    b.Property<long>("MedicalPackageId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicalServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MedicalPackageId");

                    b.HasIndex("MedicalServiceId");

                    b.ToTable("MedicalServiceDiscount");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalTestResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Document")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExamDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("MedicalServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicalWorkerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UploadDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MedicalServiceId");

                    b.HasIndex("MedicalWorkerId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalTestResults");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalWorker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HiredSince")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrentlyHired")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalWorkerType")
                        .HasColumnType("int");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfessionalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MedicalWorkers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MedicalWorker");
                });

            modelBuilder.Entity("Asklepios.Core.Models.NFZUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Voivodeship")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NFZUnits");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "DLŚ",
                            Description = "Dolnośląski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 2L,
                            Code = "KPM",
                            Description = "Kujawsko-Pomorski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 3L,
                            Code = "LBL",
                            Description = "Lubelski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 4L,
                            Code = "LBS",
                            Description = "Lubuski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 5L,
                            Code = "ŁDZ",
                            Description = "Łódzki Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 6L,
                            Code = "MŁP",
                            Description = "Małopolski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 7L,
                            Code = "MAZ",
                            Description = "Mazowiecki Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 8L,
                            Code = "OPO",
                            Description = "Opolski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 9L,
                            Code = "PDK",
                            Description = "Podkarpacki Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 10L,
                            Code = "PDL",
                            Description = "Podlaski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 11L,
                            Code = "POM",
                            Description = "Pomorski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 12L,
                            Code = "ŚLĄ",
                            Description = "Śląski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 13L,
                            Code = "ŚWI",
                            Description = "Świętokrzyski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 14L,
                            Code = "WAM",
                            Description = "Warmińsko-Mazurski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 15L,
                            Code = "WLP",
                            Description = "Wielkopolski Fundusz Zdrowia",
                            Voivodeship = 0
                        },
                        new
                        {
                            Id = 16L,
                            Code = "ZAP",
                            Description = "Zachodniopomorski Fundusz Zdrowia",
                            Voivodeship = 0
                        });
                });

            modelBuilder.Entity("Asklepios.Core.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("DateTimeAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("EventObjectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("VisitId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("EmployerNIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MedicalPackageId")
                        .HasColumnType("bigint");

                    b.Property<long>("NFZUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MedicalPackageId");

                    b.HasIndex("NFZUnitId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DefaultAglomeration")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("HasPolishCitizenship")
                        .HasColumnType("bit");

                    b.Property<string>("ImageFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PESEL")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PassportCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationError")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Prescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IdentificationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("IssueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("IssuedById")
                        .HasColumnType("bigint");

                    b.Property<long>("IssuedToId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("IssuedToId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Recommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VisitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("Recommendation");
                });

            modelBuilder.Entity("Asklepios.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MedicalWorkerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerModuleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Visit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("DateTimeSince")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateTimeTill")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MedicalResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicalRoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicalWorkerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrimaryServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsedExaminationReferralId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisitCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisitReviewId")
                        .HasColumnType("bigint");

                    b.Property<int>("VisitStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MedicalResultId")
                        .IsUnique();

                    b.HasIndex("MedicalRoomId");

                    b.HasIndex("MedicalWorkerId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId")
                        .IsUnique();

                    b.HasIndex("PrimaryServiceId");

                    b.HasIndex("UsedExaminationReferralId");

                    b.HasIndex("VisitCategoryId");

                    b.HasIndex("VisitReviewId")
                        .IsUnique();

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Asklepios.Core.Models.VisitCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VisitCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Konsultacje stacjonarne",
                            Type = 0
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "E-konsultacje",
                            Type = 0
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Stomatologia",
                            Type = 0
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Diagnostyka obrazowa ",
                            Type = 0
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Fizjoterapia",
                            Type = 0
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Gabinet zabiegowy",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Asklepios.Core.Models.VisitReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float>("AtmosphereRate")
                        .HasColumnType("real");

                    b.Property<float>("CompetenceRate")
                        .HasColumnType("real");

                    b.Property<float>("GeneralRate")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("ReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("RevieweeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VisitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RevieweeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("VisitReviews");
                });

            modelBuilder.Entity("MedicalServiceMedicalWorker", b =>
                {
                    b.Property<long>("MedicalServicesId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicalWorkersId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicalServicesId", "MedicalWorkersId");

                    b.HasIndex("MedicalWorkersId");

                    b.ToTable("MedicalServiceMedicalWorker");
                });

            modelBuilder.Entity("Asklepios.Core.Models.DentalHygienist", b =>
                {
                    b.HasBaseType("Asklepios.Core.Models.MedicalWorker");

                    b.HasDiscriminator().HasValue("4");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Doctor", b =>
                {
                    b.HasBaseType("Asklepios.Core.Models.MedicalWorker");

                    b.HasDiscriminator().HasValue("1");
                });

            modelBuilder.Entity("Asklepios.Core.Models.ElectroradiologyTechnician", b =>
                {
                    b.HasBaseType("Asklepios.Core.Models.MedicalWorker");

                    b.HasDiscriminator().HasValue("3");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Nurse", b =>
                {
                    b.HasBaseType("Asklepios.Core.Models.MedicalWorker");

                    b.HasDiscriminator().HasValue("2");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Physiotherapist", b =>
                {
                    b.HasBaseType("Asklepios.Core.Models.MedicalWorker");

                    b.HasDiscriminator().HasValue("5");
                });

            modelBuilder.Entity("Asklepios.Core.Models.IssuedMedicine", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Prescription", null)
                        .WithMany("IssuedMedicines")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalReferral", b =>
                {
                    b.HasOne("Asklepios.Core.Models.MedicalWorker", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Patient", "IssuedTo")
                        .WithMany("MedicalReferrals")
                        .HasForeignKey("IssuedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalService", "MinorMedicalService")
                        .WithMany()
                        .HasForeignKey("MinorMedicalServiceId");

                    b.HasOne("Asklepios.Core.Models.MedicalService", "PrimaryMedicalService")
                        .WithMany()
                        .HasForeignKey("PrimaryMedicalServiceId");

                    b.HasOne("Asklepios.Core.Models.Visit", null)
                        .WithMany("ExaminationReferrals")
                        .HasForeignKey("VisitId");

                    b.HasOne("Asklepios.Core.Models.Visit", "VisitWhenIssued")
                        .WithMany()
                        .HasForeignKey("VisitWhenIssuedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Visit", "VisitWhenUsed")
                        .WithMany()
                        .HasForeignKey("VisitWhenUsedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IssuedBy");

                    b.Navigation("IssuedTo");

                    b.Navigation("MinorMedicalService");

                    b.Navigation("PrimaryMedicalService");

                    b.Navigation("VisitWhenIssued");

                    b.Navigation("VisitWhenUsed");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalRoom", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Location", "Location")
                        .WithMany("MedicalRooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalService", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Location", null)
                        .WithMany("Services")
                        .HasForeignKey("LocationId");

                    b.HasOne("Asklepios.Core.Models.MedicalService", "PrimaryMedicalService")
                        .WithMany("SubServices")
                        .HasForeignKey("PrimaryMedicalServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Asklepios.Core.Models.VisitCategory", "VisitCategory")
                        .WithMany("PrimaryMedicalServices")
                        .HasForeignKey("VisitCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Visit", null)
                        .WithMany("MinorMedicalServices")
                        .HasForeignKey("VisitId");

                    b.Navigation("PrimaryMedicalService");

                    b.Navigation("VisitCategory");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalServiceDiscount", b =>
                {
                    b.HasOne("Asklepios.Core.Models.MedicalPackage", "MedicalPackage")
                        .WithMany("ServiceDiscounts")
                        .HasForeignKey("MedicalPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalService", "MedicalService")
                        .WithMany()
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalPackage");

                    b.Navigation("MedicalService");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalTestResult", b =>
                {
                    b.HasOne("Asklepios.Core.Models.MedicalService", "MedicalService")
                        .WithMany()
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalWorker", "MedicalWorker")
                        .WithMany()
                        .HasForeignKey("MedicalWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Patient", "Patient")
                        .WithMany("TestsResults")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalService");

                    b.Navigation("MedicalWorker");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalWorker", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.User", "User")
                        .WithOne("MedicalWorker")
                        .HasForeignKey("Asklepios.Core.Models.MedicalWorker", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Notification", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Patient", "Patient")
                        .WithMany("Notifications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Patient", b =>
                {
                    b.HasOne("Asklepios.Core.Models.MedicalPackage", "MedicalPackage")
                        .WithMany()
                        .HasForeignKey("MedicalPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.NFZUnit", "NFZUnit")
                        .WithMany()
                        .HasForeignKey("NFZUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Asklepios.Core.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalPackage");

                    b.Navigation("NFZUnit");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Prescription", b =>
                {
                    b.HasOne("Asklepios.Core.Models.MedicalWorker", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Patient", "IssuedTo")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IssuedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssuedBy");

                    b.Navigation("IssuedTo");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Recommendation", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Visit", "Visit")
                        .WithMany("Recommendations")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Asklepios.Core.Models.User", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Visit", b =>
                {
                    b.HasOne("Asklepios.Core.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalTestResult", "MedicalResult")
                        .WithOne("Visit")
                        .HasForeignKey("Asklepios.Core.Models.Visit", "MedicalResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalRoom", "MedicalRoom")
                        .WithMany()
                        .HasForeignKey("MedicalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalWorker", "MedicalWorker")
                        .WithMany("AllVisits")
                        .HasForeignKey("MedicalWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Patient", "Patient")
                        .WithMany("AllVisits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Prescription", "Prescription")
                        .WithOne("Visit")
                        .HasForeignKey("Asklepios.Core.Models.Visit", "PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalService", "PrimaryService")
                        .WithMany()
                        .HasForeignKey("PrimaryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalReferral", "UsedExaminationReferral")
                        .WithMany()
                        .HasForeignKey("UsedExaminationReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.VisitCategory", "VisitCategory")
                        .WithMany()
                        .HasForeignKey("VisitCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.VisitReview", "VisitReview")
                        .WithOne("Visit")
                        .HasForeignKey("Asklepios.Core.Models.Visit", "VisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("MedicalResult");

                    b.Navigation("MedicalRoom");

                    b.Navigation("MedicalWorker");

                    b.Navigation("Patient");

                    b.Navigation("Prescription");

                    b.Navigation("PrimaryService");

                    b.Navigation("UsedExaminationReferral");

                    b.Navigation("VisitCategory");

                    b.Navigation("VisitReview");
                });

            modelBuilder.Entity("Asklepios.Core.Models.VisitReview", b =>
                {
                    b.HasOne("Asklepios.Core.Models.MedicalWorker", "Reviewee")
                        .WithMany("VisitReviews")
                        .HasForeignKey("RevieweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.Patient", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("MedicalServiceMedicalWorker", b =>
                {
                    b.HasOne("Asklepios.Core.Models.MedicalService", null)
                        .WithMany()
                        .HasForeignKey("MedicalServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asklepios.Core.Models.MedicalWorker", null)
                        .WithMany()
                        .HasForeignKey("MedicalWorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asklepios.Core.Models.Location", b =>
                {
                    b.Navigation("MedicalRooms");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalPackage", b =>
                {
                    b.Navigation("ServiceDiscounts");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalService", b =>
                {
                    b.Navigation("SubServices");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalTestResult", b =>
                {
                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Asklepios.Core.Models.MedicalWorker", b =>
                {
                    b.Navigation("AllVisits");

                    b.Navigation("VisitReviews");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Patient", b =>
                {
                    b.Navigation("AllVisits");

                    b.Navigation("MedicalReferrals");

                    b.Navigation("Notifications");

                    b.Navigation("Prescriptions");

                    b.Navigation("TestsResults");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Prescription", b =>
                {
                    b.Navigation("IssuedMedicines");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Asklepios.Core.Models.User", b =>
                {
                    b.Navigation("MedicalWorker");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Asklepios.Core.Models.Visit", b =>
                {
                    b.Navigation("ExaminationReferrals");

                    b.Navigation("MinorMedicalServices");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("Asklepios.Core.Models.VisitCategory", b =>
                {
                    b.Navigation("PrimaryMedicalServices");
                });

            modelBuilder.Entity("Asklepios.Core.Models.VisitReview", b =>
                {
                    b.Navigation("Visit");
                });
#pragma warning restore 612, 618
        }
    }
}
